{"version":3,"file":"signUpUser.js","sourceRoot":"","sources":["../../../../src/controllers/users/services/signUpUser.ts"],"names":[],"mappings":";;;AAAA,yDAAkD;AAElD,yEAAkE;AAG3D,MAAM,UAAU,GAAG,KAAK,EAAE,QAAwB,EAAE,EAAE;IAC3D,IAAI,CAAC;QACH,MAAM,cAAc,GAAG,MAAM,IAAA,8BAAY,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QAE5D,OAAO,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,IAAI,EAAE;gBACJ,QAAQ,EAAE,QAAQ,CAAC,QAAQ;gBAC3B,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,cAAc,EACZ,8FAA8F;gBAChG,QAAQ,EAAE,cAAc;aACzB;SACF,CAAC,CAAA;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,kBAAmB,KAAe,CAAC,OAAO,EAAE,CAAC,CAAA;IAC/D,CAAC;AACH,CAAC,CAAA;AAhBY,QAAA,UAAU,cAgBtB","sourcesContent":["import { prisma } from '../../../config/db.config'\n\nimport { hashPassword } from '../../../utils/user/passwordHashing'\nimport type { signupUserData } from '../../../utils/user/userResponse'\n\nexport const signUpUser = async (userData: signupUserData) => {\n  try {\n    const hashedPassword = await hashPassword(userData.password)\n\n    return prisma.user.create({\n      data: {\n        userName: userData.userName,\n        email: userData.email,\n        profilePicture:\n          'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTABbXr4i-QODqhy7tofHYmTYh05rYPktzacw&s',\n        password: hashedPassword,\n      },\n    })\n  } catch (error) {\n    throw new Error(`Signup failed: ${(error as Error).message}`)\n  }\n}\n"]}