{"version":3,"file":"loginUser.js","sourceRoot":"","sources":["../../../../src/controllers/users/services/loginUser.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAkD;AAElD,wFAA+D;AAC/D,yEAAoE;AAG7D,MAAM,SAAS,GAAG,KAAK,EAAE,QAAuB,EAAE,EAAE;IACzD,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvC,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE;KACjC,CAAC,CAAA;IAEF,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,mBAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAA;IAC5C,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,IAAA,gCAAc,EAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IAEtE,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,IAAI,CAAA;IACb,CAAC;IAED,MAAM,IAAI,mBAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAA;AAC5C,CAAC,CAAA;AAhBY,QAAA,SAAS,aAgBrB","sourcesContent":["import { prisma } from '../../../config/db.config'\n\nimport HttpError from '../../../utils/error-handlers/HttpError'\nimport { verifyPassword } from '../../../utils/user/passwordHashing'\nimport type { loginUserData } from '../../../utils/user/userResponse'\n\nexport const loginUser = async (userData: loginUserData) => {\n  const user = await prisma.user.findFirst({\n    where: { email: userData.email },\n  })\n\n  if (!user) {\n    throw new HttpError('user not found', 409)\n  }\n\n  const isMatch = await verifyPassword(userData.password, user.password)\n\n  if (isMatch) {\n    return user\n  }\n\n  throw new HttpError('user not found', 409)\n}\n"]}