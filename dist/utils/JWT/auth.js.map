{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../src/utils/JWT/auth.ts"],"names":[],"mappings":";;;;;;AAAA,gEAAmD;AAGnD,wDAA6C;AAQtC,MAAM,OAAO,GAAG,CAAC,IAAU,EAAE,EAAE,CACpC,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,gBAAG,CAAC,UAAU,CAAC,CAAA;AAD1E,QAAA,OAAO,WACmE;AAEhF,MAAM,OAAO,GAAG,CAAC,KAAa,EAAsB,EAAE;IAC3D,IAAI,CAAC;QACH,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAA;QAEvB,MAAM,MAAM,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,gBAAG,CAAC,UAAU,CAAe,CAAA;QAE9D,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,IAAI,IAAI,MAAM,EAAE,CAAC;YAC3D,OAAO,MAAqB,CAAA;QAC9B,CAAC;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,IAAI,CAAA;IACb,CAAC;AACH,CAAC,CAAA;AAdY,QAAA,OAAO,WAcnB","sourcesContent":["import jwt, { type JwtPayload } from 'jsonwebtoken'\n\nimport { type User } from '@prisma/client'\nimport { env } from '../../config/env.config'\n\ninterface DecodedUser extends JwtPayload {\n  id: string\n  userName: string\n  email: string\n}\n\nexport const setUser = (user: User) =>\n  jwt.sign({ id: user.id, userName: user.userName, email: user.email }, env.JWT_SECRET)\n\nexport const getUser = (token: string): DecodedUser | null => {\n  try {\n    if (!token) return null\n\n    const decode = jwt.verify(token, env.JWT_SECRET) as JwtPayload\n\n    if (decode && typeof decode === 'object' && 'id' in decode) {\n      return decode as DecodedUser\n    }\n\n    return null\n  } catch (_) {\n    return null\n  }\n}\n"]}